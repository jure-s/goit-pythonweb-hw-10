from sqlalchemy.orm import Session
from app.database.models import Contact, User
from app.database.schemas import (
    ContactCreate, ContactUpdate,
    UserCreate, UserResponse
)
from app.services.security import hash_password, verify_password as verify_password_service  # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º–ø–æ—Ä—Ç

# üîπ –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (User)
def create_user(db: Session, user: UserCreate) -> UserResponse:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ö–µ—à—É–≤–∞–Ω–Ω—è–º –ø–∞—Ä–æ–ª—è"""
    hashed_password = hash_password(user.password)
    db_user = User(
        username=user.username,
        email=user.email,
        password_hash=hashed_password
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)

    return UserResponse(
        id=db_user.id,
        username=db_user.username,
        email=db_user.email,
        is_verified=db_user.is_verified,
        avatar_url=db_user.avatar_url,
        created_at=db_user.created_at,
        updated_at=db_user.updated_at
    )

def get_user_by_email(db: Session, email: str):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email"""
    return db.query(User).filter(User.email == email).first()

def get_user_by_id(db: Session, user_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
    return db.query(User).filter(User.id == user_id).first()

# üîπ –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ (Contact)
def create_contact(db: Session, contact: ContactCreate, user_id: int):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    db_contact = Contact(
        **contact.dict(),
        user_id=user_id
    )
    db.add(db_contact)
    db.commit()
    db.refresh(db_contact)
    return db_contact

def get_contacts(db: Session, user_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return db.query(Contact).filter(Contact.user_id == user_id).all()

def get_contact_by_id(db: Session, contact_id: int, user_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑–∞ ID (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ)"""
    return db.query(Contact).filter(Contact.id == contact_id, Contact.user_id == user_id).first()

def update_contact(db: Session, contact_id: int, contact: ContactUpdate, user_id: int):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    db_contact = db.query(Contact).filter(Contact.id == contact_id, Contact.user_id == user_id).first()
    if db_contact:
        for key, value in contact.dict(exclude_unset=True).items():
            setattr(db_contact, key, value)
        db.commit()
        db.refresh(db_contact)
    return db_contact

def delete_contact(db: Session, contact_id: int, user_id: int):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    db_contact = db.query(Contact).filter(Contact.id == contact_id, Contact.user_id == user_id).first()
    if db_contact:
        db.delete(db_contact)
        db.commit()
    return db_contact

# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—é
def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤–≤–µ–¥–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–º—É —Ö–µ—à—É."""
    return verify_password_service(plain_password, hashed_password)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é

